//24ms

class Solution {
public:
    int d[4][2]={{0,1},{0,-1},{1,0},{-1,0}},m,n;
    vector<vector<bool>> visited;
    
    int numIslands(vector<vector<char>>& grid) {
        m=grid.size();
        if(m==0){
            return 0;
        }
        n=grid[0].size();
        int res=0;
        visited=vector<vector<bool>>(m,vector<bool>(n,false));
        
        for(int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                if(grid[i][j]=='1' && !visited[i][j]){
                    res++;
                    recursion(grid,i,j);
                }
            }
        }
        
        return res;
    }
    
    void recursion(vector<vector<char>>& grid,int startx,int starty){
        
        visited[startx][starty]=true;
            
        for(int i=0;i<4;i++){
            int newx=startx+d[i][0];
            int newy=starty+d[i][1];
            if(judge(newx,newy) && grid[newx][newy]=='1' && !visited[newx][newy]){
                recursion(grid,newx,newy);
            }
        }
        
        return;
    }
    
    bool judge(int x,int y){
        return x>=0 && y>=0 && x<m && y<n;
    }
};
