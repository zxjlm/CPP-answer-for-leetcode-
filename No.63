//dfs

class Solution {
public:
    int d[2][2]={{0,1},{1,0}};
    int res;
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        res=0;
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        if(m==0 || obstacleGrid[0][0]==1)  return 0;
        if(m==1)
            for(auto i:obstacleGrid[0])
                if(i==1)
                    return 0;
        dfs(obstacleGrid,m,n,0,0);
            
        return res;
    }
    
    void dfs(vector<vector<int>>& vis,int m,int n,int startx,int starty){
        if(startx==m-1 && starty==n-1){
            res++;
            return;
        }
        
        for (int i=0;i<2;i++){
            int newx=startx+d[i][0];
            int newy=starty+d[i][1];
            if(judge(newx,newy,m,n) && vis[newx][newy]!=1)
                dfs(vis,m,n,newx,newy);
        }
    }
    
    bool judge(int i,int j,int m,int n){
        return i<m && j<n;
    }
};
