//40ms

//
// Created by Lion Heart on 2019-06-08.
//

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <set>
#include <unordered_map>

using namespace std;

int d[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
int m,n;
vector<vector<bool>> visited;

bool judge(int x,int y){
    if(x>=0 && y>=0 && y<n && x<m){
        return true;
    }
    return false;
}


bool recursion(const vector<vector<char>>& board,int startx,int starty,const string& word,int index){
    if(index==word.size()-1){
        return word[index]==board[startx][starty];
    }

    if(board[startx][starty]==word[index]){
        visited[startx][starty] = true;
        for(int i=0;i<4;i++){
            int newx = startx+d[i][0];
            int newy = starty+d[i][1];
            if(judge(newx,newy) && !visited[newx][newy] && recursion(board,newx,newy,word,index+1) ){
                return true;
            }
        }
        visited[startx][starty] = false;
    }


    return false;
}

bool exist(vector<vector<char>>& board, string word) {
    m=board.size();
    n=board[0].size();

    visited = vector<vector<bool>>(m,vector<bool>(n,false));

//    if(my==0 ) return false;

    for ( int i=0;i<m;i++){
        for (int j=0;j<n;j++){
            if(recursion(board,i,j,word,0)) return true;
        }
    }


    return false;
}


int main() {
    vector<vector<char>> board;
    vector<char> fir{'A','B','C','E'};
    vector<char> snd{'S','F','C','S'};
    vector<char> trd{'A','D','E','E'};
    board.push_back(fir);
    board.push_back(snd);
    board.push_back(trd);

    cout << board.size() <<endl;
    cout << board[0].size() <<endl;

    if(exist(board,"ABCCED"))
        cout << " yes " <<endl;
    cout << "over" <<endl;



    return 0;
}
