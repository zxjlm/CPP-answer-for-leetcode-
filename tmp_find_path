class Solution {
public:
    int d[8][2]={{1,1},{1,0},{-1,-1},{-1,1},{1,-1},{0,1},{0,-1},{-1,0}};
    int m,n,res;
    vector<vector<int>> visited;
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        m=grid.size();
        if(m==0) return -1;
        n=grid[0].size();
        if(grid[0][0]==1 || grid[m-1][n-1]==1) return -1;
        res=INT_MAX;
        visited=vector<vector<int>>(m,vector<int>(n,0));
        dps(grid,0,0,0);
        
        if(res==INT_MAX)
            return -1;
        return res+1;
    }
    
    void dps(vector<vector<int>>& grid,int startx,int starty,int step){
        if(startx==m-1 && starty==n-1){
            res=min(step,res);
            return;
        }
        
        for(int i=0;i<8;i++){
            visited[startx][starty] = 1;
            int newx=startx+d[i][0];
            int newy=starty+d[i][1];
            if(newx<m && newy<n && newx>=0 && newy>=0 && visited[newx][newy]==0 && grid[newx][newy] ==0){
                dps(grid,newx,newy,step+1);
            }
            visited[startx][starty] = 0;
        }
    }
};
