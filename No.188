//这道题折腾了一个上午啊……关键是初始化动态规划的时候考虑要全面，就像这次的这个三维数组，初始化的时候可以将它降到二维，然后对另一个维度进行整个维度的初始化。


class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        if(n<=1 || k==0) return 0;
        if(2*k>n)
            return maxProfit_inf(prices);
        
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(k+1,vector<int>(2,0)));
        
        for(int i=0;i<n;i++){
            for(int j=k;j>=1;j--){
                if(i==0){
                    dp[i][0][0]=0;
                    dp[i][j][0]=0;
                    dp[i][0][1]=INT_MIN;
                    // dp[i][j][1]=INT_MIN;
                    dp[i][j][1]=-prices[0];
                }
                else{
                dp[i][j][0]=max(dp[i-1][j][1]+prices[i],dp[i-1][j][0]);
                dp[i][j][1]=max(dp[i-1][j-1][0]-prices[i],dp[i-1][j][1]);
                }
            }
        }
        int max=0;
        for(int i=1;i<=k;i++){
            if(dp[n-1][i][0]>max){
                max=dp[n-1][i][0];
            }
        }
        return max;
    }
    
    int maxProfit_inf(vector<int>& prices) {
        int n = prices.size();
        if(n<=1) return 0;
        vector<int> sell(n,0);
        vector<int> buy(n,0);
        buy[0]=-prices[0];
        for(int i=1;i<n;i++){
            sell[i]=max(sell[i-1],buy[i-1]+prices[i]);
            buy[i]=max(buy[i-1],sell[i-1]-prices[i]);
        }
        return sell[n-1];
    }
};
