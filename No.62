//dfs
class Solution {
public:
    int d[2][2]={{0,1},{1,0}};
    int res;
    
    int uniquePaths(int m, int n) {
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        res=0;
        dfs(visited,m,n,0,0);
        
        return res;
    }
    
    void dfs(vector<vector<bool>>& vis,int m,int n,int startx,int starty){
        if(startx==m-1 && starty==n-1){
            res++;
            return;
        }
        
        for (int i=0;i<2;i++){
            int newx=startx+d[i][0];
            int newy=starty+d[i][1];
            if(judge(newx,newy,m,n))
                dfs(vis,m,n,newx,newy);
        }
    }
    
    bool judge(int i,int j,int m,int n){
        return i<m && j<n;
    }
};


//dp
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m <= 0 || n <= 0){
            return 0;
        }
        //如果只有一行或者一列，那么从起点到终点就只有一种可能
        if(m == 1){
            return 1;
        }
        if (n == 1){
            return 1;
        }
        vector<int> dp(n, 1);
        for(int i = 1; i< m; i++){
            for(int j = 1; j < n; j++){
                dp[j] = dp[j - 1] + dp[j];
            }
        }
        return dp[n - 1];
    }
};
